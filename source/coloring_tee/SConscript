'''
@file: SConscript
@date: Okt 20, 2012

@brief: Cross compilation SConscript.
@version: 3.0 

@author: Milos Subotic milos.subotic.sm@gmail.com
@license: MIT
'''

###############################################################################

from __future__ import print_function

###############################################################################

__version__ = '3.0'

###############################################################################

import Package
import Utils

###############################################################################

Import('sconscriptArgs')
project = sconscriptArgs.project

###############################################################################

projectName = 'coloring_tee'

utilsPackageInterfaces = project.buildPackages('../utils')
dependecies = [ 
	utilsPackageInterfaces['utils'],
]

programPackage = Package.ProgramPackage(
	project = project,
	packageName = projectName,
	dependecies = dependecies
)

###############################################################################

sharedEnv = programPackage.sharedEnv
PREFIX = sharedEnv.getPREFIX()
VPATH = sharedEnv.getVPATH()

platform = Utils.hostPlatform()
abi = Utils.hostABI()

configFileName = 'config.lua'

sourceConfigFile = Dir('#').Dir('share/coloring_tee').File(configFileName)

defaultConfigDir = PREFIX.Dir('share/coloring_tee')
defaultConfigFile = defaultConfigDir.File(configFileName)

###############################################################################

# Do not config when clean or when tarballing.
# That wont influence on flags which are set by these lines.
if not (sharedEnv.GetOption('clean') 
		or ('tarball' in COMMAND_LINE_TARGETS)
		or ('sdist' in COMMAND_LINE_TARGETS)
	):

	# Check for pkg-config and lua5.1.

	def CheckPKGConfig(context, version):
		context.Message('Checking for pkg-config... ')
		ret = context.TryAction(
				'pkg-config --atleast-pkgconfig-version={0}'.format(version)
		)[0]
		context.Result(ret)
		return ret

	def CheckPKG(context, name):
		context.Message('Checking for {0}... '.format(name))
		ret = context.TryAction("pkg-config --exists '{0}'".format(name))[0]
		context.Result(ret)
		return ret


	conf = Configure(sharedEnv, 
		custom_tests = { 
			'CheckPKGConfig' : CheckPKGConfig,
			'CheckPKG' : CheckPKG 
		},
		conf_dir = VPATH.Dir('.sconf_temp'),
		log_file = VPATH.File('config.log')
	)

	if not conf.CheckPKGConfig('0.15.0'):
		print('pkg-config >= 0.15.0 not found.')
		Exit(1)


	if conf.CheckPKG('lua5.1'):
		luaName = 'lua5.1'
	elif conf.CheckPKG('lua'):
		luaName = 'lua'
	else:
		print('lua nor lua5.1 not found.')
		Exit(1)

	conf.Finish()
	
	###################################
	# lua5.1 flags.
	
	sharedEnv.ParseConfig('pkg-config --cflags --libs ' \
		+ luaName
	)

#######################################
# Building config.h...

def build_config_h(env, target, source):
	for a_target in target:
		print('Building {0}...'.format(a_target))
		with file(str(a_target), "w") as config_h:
			config_h.write('#define INSTALL_PREFIX "{0}"\n'.format(
					PREFIX.abspath))
			config_h.write('#define VERSION_STR "{0}"\n'.format(__version__))
			config_h.write('#define PROGRAM_NAME "{0}"\n'.format(projectName))
			config_h.write('#define DEFAUL_CONFIG_FILE "{0}"\n'.format(
					defaultConfigFile))

config_h = VPATH.File('config.h')
config_h = sharedEnv.Command(target = config_h,
		source = '', action = build_config_h)

# Used for config.
sharedEnv['CPPPATH'].append(VPATH.abspath)

###############################################################################

programPackage.build()
programPackage.addStandardTargets()
#sharedEnv.Default('release')
programPackage.sharedEnv.Default(
	'{platform}_{abi}_release'.format(
		platform = platform,
		abi = abi
	)
)

installTargets = []
installTargets += sharedEnv.Install(
	PREFIX.Dir('bin'),
	VPATH.Dir(programPackage.packageName).Dir(platform).Dir(abi) \
		.Dir('release').File('coloring_tee')
)
installTargets += sharedEnv.Install(
	defaultConfigDir,
	sourceConfigFile
)
installTargets += sharedEnv.Install(
	PREFIX.Dir('bin'),
	Utils.glob('*', Dir('#/bin'))
)

sharedEnv.Alias('install', installTargets)
sharedEnv.Help('\ninstall\n')

###############################################################################

"""

import os
import sys
import Utils
import Targets
import ProjectCompile
import ShellHelpers

###############################################################################

###############################################################################

# TODO This fails in concatenating string and define of string.
# Also find out how to add -std=c++11 instead of -std=c++0x.
#localEnv['CXXFLAGS'] += localEnv.globalConfig.cxx0xCXXFLAGS()

###############################################################################

# Do not config when clean or when tarballing.
# That wont influence on flags which are set by these lines.
if not (localEnv.GetOption('clean') or (
			'tarball' in COMMAND_LINE_TARGETS)):

	# Check for pkg-config and lua5.1.

	def CheckPKGConfig(context, version):
		context.Message('Checking for pkg-config... ')
		ret = context.TryAction(
				'pkg-config --atleast-pkgconfig-version=%s' % version)[0]
		context.Result(ret)
		return ret

	def CheckPKG(context, name):
		context.Message('Checking for %s... ' % name)
		ret = context.TryAction('pkg-config --exists \'%s\'' % name)[0]
		context.Result(ret)
		return ret


	conf = Configure(localEnv, custom_tests =
					{ 'CheckPKGConfig' : CheckPKGConfig,
					'CheckPKG' : CheckPKG },
					conf_dir = localEnv.getVPATH().Dir('.sconf_temp'),
					log_file = localEnv.getVPATH().File('config.log'))

	if not conf.CheckPKGConfig('0.15.0'):
		print('pkg-config >= 0.15.0 not found.')
		Exit(1)


	if conf.CheckPKG('lua5.1'):
		luaName = 'lua5.1'
	elif conf.CheckPKG('lua'):
		luaName = 'lua'
	else:
		print('lua nor lua5.1 not found.')
		Exit(1)

	conf.Finish()
	
	###################################
	# lua5.1 flags.
	
	localEnv.ParseConfig('pkg-config --cflags --libs ' + luaName)

###############################################################################
# Building config.h...

def build_config_h(env, target, source):
	for a_target in target:
		print('Building {0}...'.format(a_target))
		with file(str(a_target), "w") as config_h:
			config_h.write('#define INSTALL_PREFIX "{0}"\n'.format(
					prefix.abspath))
			config_h.write('#define VERSION_STR "{0}"\n'.format(version))
			config_h.write('#define PROGRAM_NAME "{0}"\n'.format(projectName))
			config_h.write('#define DEFAUL_CONFIG_FILE "{0}"\n'.format(
					defaultConfigFile))

config_h = localEnv.getVPATH().File('config.h')
config_h = localEnv.Command(target = config_h,
		source = '', action = build_config_h)

# Used for config.
localEnv['CPPPATH'].append(localEnv.getVPATH().abspath)

###############################################################################

def _programBuildFunctionRecursive(projectCompileParams):

	env = projectCompileParams.clonedEnv

	###################################

	if projectCompileParams.platform == 'linux':

		###################################

		src = Utils.glob('*.cpp', 'src/')

		buildDir = projectCompileParams.portBuildDir
		src = [ buildDir.File(s) for s in src ]
		target = buildDir.File(ProjectCompile.programName(env,
			projectCompileParams.projectName))

		###################################

		projects = [ 'utils' ]

		env['CPPPATH'] += [ os.path.join('../', s, 'include/') 
				for s in projects ]

		projectsBuildDir = env.getVPATH().Dir(
				projectCompileParams.platformAbiBuild).Dir('source')
		subProjects = [ projectsBuildDir.Dir(s).File(
				ProjectCompile.staticLibraryName(env, s)) for s in projects ]

		src += subProjects

		###################################

		return projectCompileParams.clonedEnv.Program(target, src)

###############################################################################

targets = ProjectCompile.crossCompile(env = localEnv,
		projectName = projectName,
		buildFunction = _programBuildFunctionRecursive,
		VPATH = localEnv.getVPATH())

#######################################


standardTargets = Targets.makeStandardTargets(localEnv, targets)
localEnv.Default('linux_release')

installTargets = []
installTargets += localEnv.Install(prefix.Dir('bin'),
		localEnv.getVPATH().File(
		'linux/x86_64/release/source/coloring_tee/coloring_tee'))
installTargets += localEnv.Install(defaultConfigDir,
		sourceConfigFile)
installTargets += localEnv.Install(prefix.Dir('bin'),
		[ Dir('#').File(s) for s in Utils.glob('*', 'bin') ])

localEnv.Alias('install', installTargets)
localEnv.Help('\ninstall\n')
"""

